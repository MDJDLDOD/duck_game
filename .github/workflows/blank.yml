import pygame
import random

# Initialisierung von Pygame
pygame.init()

# Fenstergröße
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

# Farben
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
YELLOW = (255, 255, 0)

# Klassen
class Duck(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((50, 50))
        self.image.fill(GREEN)
        self.rect = self.image.get_rect()
        self.rect.center = (SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)
        self.speed = 5
        self.lives = 2
        self.bread_count = 0

    def update(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            self.rect.x -= self.speed
        elif keys[pygame.K_RIGHT]:
            self.rect.x += self.speed
        elif keys[pygame.K_UP]:
            self.rect.y -= self.speed
        elif keys[pygame.K_DOWN]:
            self.rect.y += self.speed

        # Begrenze die Ente innerhalb des Spielfelds
        self.rect.x = max(0, min(self.rect.x, SCREEN_WIDTH - self.rect.width))
        self.rect.y = max(0, min(self.rect.y, SCREEN_HEIGHT - self.rect.height))

class Dog(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((50, 50))
        self.image.fill(RED)
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, SCREEN_WIDTH - self.rect.width)
        self.rect.y = random.randint(0, SCREEN_HEIGHT - self.rect.height)
        self.speed = random.randint(1, 3)

    def update(self):
        self.rect.x += random.randint(-self.speed, self.speed)
        self.rect.y += random.randint(-self.speed, self.speed)
        if self.rect.left > SCREEN_WIDTH:
            self.rect.right = 0
        elif self.rect.right < 0:
            self.rect.left = SCREEN_WIDTH
        if self.rect.top > SCREEN_HEIGHT:
            self.rect.bottom = 0
        elif self.rect.bottom < 0:
            self.rect.top = SCREEN_HEIGHT

class Item(pygame.sprite.Sprite):
    def __init__(self, color):
        super().__init__()
        self.image = pygame.Surface((30, 30))
        self.image.fill(color)
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, SCREEN_WIDTH - self.rect.width)
        self.rect.y = random.randint(0, SCREEN_HEIGHT - self.rect.height)

# Initialisierung des Bildschirms
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Duck Game")

# Clock
clock = pygame.time.Clock()

# Sprite-Gruppen
all_sprites = pygame.sprite.Group()
dogs = pygame.sprite.Group()
items = pygame.sprite.Group()

# Spieler
duck = Duck()
all_sprites.add(duck)

# Hunde erzeugen
for i in range(2):
    dog = Dog()
    all_sprites.add(dog)
    dogs.add(dog)

# Items erzeugen
for _ in range(10):
    bread = Item(YELLOW)
    all_sprites.add(bread)
    items.add(bread)

for _ in range(5):
    poison = Item(RED)
    all_sprites.add(poison)
    items.add(poison)

# Spiel-Schleife
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Spiel-Logik
    all_sprites.update()

    # Kollisionen prüfen
    dog_hits = pygame.sprite.spritecollide(duck, dogs, False)
    if dog_hits:
        duck.lives -= 1
        if duck.lives == 0:
            response = input("Game Over! Möchtest du neu starten? (ja/nein): ")
            if response.lower() == "ja":
                duck.lives = 2
                duck.rect.center = (SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)
                duck.bread_count = 0
                for item in items:
                    item.rect.x = random.randint(0, SCREEN_WIDTH - item.rect.width)
                    item.rect.y = random.randint(0, SCREEN_HEIGHT - item.rect.height)
                for dog in dogs:
                    dog.rect.x = random.randint(0, SCREEN_WIDTH - dog.rect.width)
                    dog.rect.y = random.randint(0, SCREEN_HEIGHT - dog.rect.height)
            else:
                running = False

    item_hits = pygame.sprite.spritecollide(duck, items, True)
    for item in item_hits:
        if item.image.get_at((0, 0)) == YELLOW:  # Brot
            print("Yum! Brot gegessen!")
            duck.bread_count += 1
            if duck.bread_count == 10:
                print("Victory!")
                response = input("Möchtest du neu starten? (ja/nein): ")
                if response.lower() == "ja":
                    duck.bread_count = 0
                    for item in items:
                        item.rect.x = random.randint(0, SCREEN_WIDTH - item.rect.width)
                        item.rect.y = random.randint(0, SCREEN_HEIGHT - item.rect.height)
                else:
                    running = False
        elif item.image.get_at((0, 0)) == RED:  # Gift
            print("Oh nein! Gift gegessen!")
            duck.lives = 0

    # Zeichnen
    screen.fill((0, 0, 0))
    all_sprites.draw(screen)

    # Brot-Zähler anzeigen
    font = pygame.font.SysFont(None, 36)
    text = font.render(f"Breads eaten: {duck.bread_count}", True, WHITE)
    screen.blit(text, (10, 10))

    # Bildschirm aktualisieren
    pygame.display.flip()

    # Tick-Rate
    clock.tick(60)

# Pygame beenden
pygame.quit()

